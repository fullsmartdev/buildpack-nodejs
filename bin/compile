#!/usr/bin/env bash

set -e    # fail fast
# set -x  # debug

BUILD_DIR=$1
CACHE_DIR=$2

source support/helpers.sh

# download latest stable version of node
# detect desired node version in package.json using semver


# if !desired
#   (cached) ? cached : latest-stable
# else
#   (latest-stable satisfies desired) ? latest-stable : download

# if desired and cached are absent, use latest
# if desired is absent and cache is present, use cached
# if desired is ">" and differs from cached and latest-stable, download
# if desired is specific and differs from cached and latest-stable, download

semver.satisfies('0.10.15', '>=0.10.x')


package="http://s3pository.heroku.com/$engine-$version.tgz"
curl $package -s -o - | tar xzf - -C $location

function cat_npm_debug_log() {
  if [ -f $BUILD_DIR/npm-debug.log ]; then
    cat $BUILD_DIR/npm-debug.log
  fi
}
trap cat_npm_debug_log EXIT

echo "-----> Resolving engine versions"

NODE_VERSION=$(package_resolve_version "node")
echo "Using node version: ${NODE_VERSION}" | indent

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

echo "-----> Fetching node binary"

echo "-----> Vendoring node binary into slug"
PATH="$BUILD_DIR/bin:$PATH"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH:$CPATH"
export CPPPATH="$INCLUDE_PATH:$CPPPATH"

echo "-----> Installing dependencies with npm"
run_npm "install --production"
run_npm "rebuild"
echo "Dependencies installed" | indent
